// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: segments.sql

package sqlc

import (
	"context"
)

const getSegmentPoints = `-- name: GetSegmentPoints :many
SELECT latitude::float, longitude::float FROM points where segment_id=$1
`

type GetSegmentPointsRow struct {
	Latitude  float64
	Longitude float64
}

func (q *Queries) GetSegmentPoints(ctx context.Context, segmentID int32) ([]GetSegmentPointsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSegmentPoints, segmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSegmentPointsRow
	for rows.Next() {
		var i GetSegmentPointsRow
		if err := rows.Scan(&i.Latitude, &i.Longitude); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertSegment = `-- name: InsertSegment :exec
insert into "public"."segments" (track_id, geometry) values ($1, $2)
`

type InsertSegmentParams struct {
	TrackID  int32
	Geometry interface{}
}

func (q *Queries) InsertSegment(ctx context.Context, arg InsertSegmentParams) error {
	_, err := q.db.ExecContext(ctx, insertSegment, arg.TrackID, arg.Geometry)
	return err
}
