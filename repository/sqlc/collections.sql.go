// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: collections.sql

package sqlc

import (
	"context"

	"github.com/lib/pq"
)

const getCollectionByName = `-- name: GetCollectionByName :one
select id, name, user_id from collections where name = $1
`

func (q *Queries) GetCollectionByName(ctx context.Context, name string) (Collection, error) {
	row := q.db.QueryRowContext(ctx, getCollectionByName, name)
	var i Collection
	err := row.Scan(&i.ID, &i.Name, &i.UserID)
	return i, err
}

const getCollectionName = `-- name: GetCollectionName :one
select name from collections where id = $1
`

func (q *Queries) GetCollectionName(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRowContext(ctx, getCollectionName, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const getCollections = `-- name: GetCollections :many
select c.id, c.name from collections c order by c.id
`

type GetCollectionsRow struct {
	ID   int32
	Name string
}

func (q *Queries) GetCollections(ctx context.Context) ([]GetCollectionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCollections)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCollectionsRow
	for rows.Next() {
		var i GetCollectionsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertCollection = `-- name: InsertCollection :exec
with c as (insert into collections (name, user_id) values ($1, $2) returning id)
insert into track_collections (collection_id, track_id)
(select c.id , unnest($3::integer[]) from c)
`

type InsertCollectionParams struct {
	Name     string
	UserID   int32
	TrackIds []int32
}

func (q *Queries) InsertCollection(ctx context.Context, arg InsertCollectionParams) error {
	_, err := q.db.ExecContext(ctx, insertCollection, arg.Name, arg.UserID, pq.Array(arg.TrackIds))
	return err
}
