// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: gpxfiles.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const deleteGPXFile = `-- name: DeleteGPXFile :one
delete from "public"."gpxfiles" where id = $1 returning filename
`

func (q *Queries) DeleteGPXFile(ctx context.Context, id int32) (string, error) {
	row := q.db.QueryRowContext(ctx, deleteGPXFile, id)
	var filename string
	err := row.Scan(&filename)
	return filename, err
}

const getGPXFile = `-- name: GetGPXFile :one
select id, filename, filesize, status, link, created_at, user_id, version, creator, name, description, author_name, author_email, author_link, author_link_text, author_link_type, copyright, copyright_year, copyright_license, link_text, link_type, time, keywords from "public"."gpxfiles" where id = $1
`

func (q *Queries) GetGPXFile(ctx context.Context, id int32) (Gpxfile, error) {
	row := q.db.QueryRowContext(ctx, getGPXFile, id)
	var i Gpxfile
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Filesize,
		&i.Status,
		&i.Link,
		&i.CreatedAt,
		&i.UserID,
		&i.Version,
		&i.Creator,
		&i.Name,
		&i.Description,
		&i.AuthorName,
		&i.AuthorEmail,
		&i.AuthorLink,
		&i.AuthorLinkText,
		&i.AuthorLinkType,
		&i.Copyright,
		&i.CopyrightYear,
		&i.CopyrightLicense,
		&i.LinkText,
		&i.LinkType,
		&i.Time,
		&i.Keywords,
	)
	return i, err
}

const getGPXFileByFilename = `-- name: GetGPXFileByFilename :one
select id, filename, filesize, status, link, created_at, user_id, version, creator, name, description, author_name, author_email, author_link, author_link_text, author_link_type, copyright, copyright_year, copyright_license, link_text, link_type, time, keywords from "public"."gpxfiles" where filename = $1
`

func (q *Queries) GetGPXFileByFilename(ctx context.Context, filename string) (Gpxfile, error) {
	row := q.db.QueryRowContext(ctx, getGPXFileByFilename, filename)
	var i Gpxfile
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Filesize,
		&i.Status,
		&i.Link,
		&i.CreatedAt,
		&i.UserID,
		&i.Version,
		&i.Creator,
		&i.Name,
		&i.Description,
		&i.AuthorName,
		&i.AuthorEmail,
		&i.AuthorLink,
		&i.AuthorLinkText,
		&i.AuthorLinkType,
		&i.Copyright,
		&i.CopyrightYear,
		&i.CopyrightLicense,
		&i.LinkText,
		&i.LinkType,
		&i.Time,
		&i.Keywords,
	)
	return i, err
}

const getGPXFiles = `-- name: GetGPXFiles :many
select
  f.id, f.filename, f.filesize, f.link, f.status, f.created_at,
  u.id, u.username, u.hashed_password, u.created_at
from "public"."gpxfiles" f
join "public"."users" u on f."user_id" = u."id"
order by f.created_at desc
`

type GetGPXFilesRow struct {
	ID        int32
	Filename  string
	Filesize  int64
	Link      string
	Status    Filestatus
	CreatedAt time.Time
	User      User
}

func (q *Queries) GetGPXFiles(ctx context.Context) ([]GetGPXFilesRow, error) {
	rows, err := q.db.QueryContext(ctx, getGPXFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGPXFilesRow
	for rows.Next() {
		var i GetGPXFilesRow
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.Filesize,
			&i.Link,
			&i.Status,
			&i.CreatedAt,
			&i.User.ID,
			&i.User.Username,
			&i.User.HashedPassword,
			&i.User.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertGPXFile = `-- name: InsertGPXFile :one
insert into "public"."gpxfiles" (filename, filesize,  status, user_id, created_at) values ($1, $2, 'uploaded', $3, Now()) returning id
`

type InsertGPXFileParams struct {
	Filename string
	Filesize int64
	UserID   int32
}

func (q *Queries) InsertGPXFile(ctx context.Context, arg InsertGPXFileParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertGPXFile, arg.Filename, arg.Filesize, arg.UserID)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const setGPXFileStatus = `-- name: SetGPXFileStatus :exec
update "public"."gpxfiles" set status = $1 where id = $2
`

type SetGPXFileStatusParams struct {
	Status Filestatus
	ID     int32
}

func (q *Queries) SetGPXFileStatus(ctx context.Context, arg SetGPXFileStatusParams) error {
	_, err := q.db.ExecContext(ctx, setGPXFileStatus, arg.Status, arg.ID)
	return err
}

const updateGPXFile = `-- name: UpdateGPXFile :exec
update "public"."gpxfiles" set
version=$2,
creator=$3,
name=$4,
description=$5,
author_name=$6,
author_email=$7,
author_link=$8,
author_link_text=$9,
author_link_type=$10,
copyright=$11,
copyright_year=$12,
copyright_license=$13,
link=$14,
link_text=$15,
link_type=$16,
time=$17,
keywords=$18
where id = $1
`

type UpdateGPXFileParams struct {
	ID               int32
	Version          sql.NullString
	Creator          sql.NullString
	Name             sql.NullString
	Description      sql.NullString
	AuthorName       sql.NullString
	AuthorEmail      sql.NullString
	AuthorLink       sql.NullString
	AuthorLinkText   sql.NullString
	AuthorLinkType   sql.NullString
	Copyright        sql.NullString
	CopyrightYear    sql.NullString
	CopyrightLicense sql.NullString
	Link             string
	LinkText         sql.NullString
	LinkType         sql.NullString
	Time             sql.NullTime
	Keywords         sql.NullString
}

func (q *Queries) UpdateGPXFile(ctx context.Context, arg UpdateGPXFileParams) error {
	_, err := q.db.ExecContext(ctx, updateGPXFile,
		arg.ID,
		arg.Version,
		arg.Creator,
		arg.Name,
		arg.Description,
		arg.AuthorName,
		arg.AuthorEmail,
		arg.AuthorLink,
		arg.AuthorLinkText,
		arg.AuthorLinkType,
		arg.Copyright,
		arg.CopyrightYear,
		arg.CopyrightLicense,
		arg.Link,
		arg.LinkText,
		arg.LinkType,
		arg.Time,
		arg.Keywords,
	)
	return err
}
