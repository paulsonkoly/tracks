// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tracks.sql

package repository

import (
	"context"
)

const getTrack = `-- name: GetTrack :one
select id, name, type, gpxfile_id, created_at from "public"."tracks" where id = $1
`

func (q *Queries) GetTrack(ctx context.Context, id int32) (Track, error) {
	row := q.db.QueryRowContext(ctx, getTrack, id)
	var i Track
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.GpxfileID,
		&i.CreatedAt,
	)
	return i, err
}

const getTracks = `-- name: GetTracks :many
SELECT 
    t.id, t.name, t.type, t.gpxfile_id, t.created_at,
    SUM(ST_Length(s.geometry::geography))::double precision AS track_length_meters
FROM 
    public.tracks t
JOIN 
    public.segments s ON t.id = s.track_id
GROUP BY 
    t.id
ORDER BY 
    t.created_at desc
`

type GetTracksRow struct {
	Track             Track
	TrackLengthMeters float64
}

func (q *Queries) GetTracks(ctx context.Context) ([]GetTracksRow, error) {
	rows, err := q.db.QueryContext(ctx, getTracks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTracksRow
	for rows.Next() {
		var i GetTracksRow
		if err := rows.Scan(
			&i.Track.ID,
			&i.Track.Name,
			&i.Track.Type,
			&i.Track.GpxfileID,
			&i.Track.CreatedAt,
			&i.TrackLengthMeters,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTrack = `-- name: InsertTrack :one
insert into "public"."tracks" (gpxfile_id, type, name) values ($1, $2, $3) returning id
`

type InsertTrackParams struct {
	GpxfileID int32
	Type      Tracktype
	Name      string
}

func (q *Queries) InsertTrack(ctx context.Context, arg InsertTrackParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, insertTrack, arg.GpxfileID, arg.Type, arg.Name)
	var id int32
	err := row.Scan(&id)
	return id, err
}
