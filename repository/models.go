// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repository

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type Filestatus string

const (
	FilestatusUploaded         Filestatus = "uploaded"
	FilestatusProcessed        Filestatus = "processed"
	FilestatusProcessingFailed Filestatus = "processing_failed"
)

func (e *Filestatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Filestatus(s)
	case string:
		*e = Filestatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Filestatus: %T", src)
	}
	return nil
}

type NullFilestatus struct {
	Filestatus Filestatus
	Valid      bool // Valid is true if Filestatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFilestatus) Scan(value interface{}) error {
	if value == nil {
		ns.Filestatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Filestatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFilestatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Filestatus), nil
}

type Tracktype string

const (
	TracktypeTrack Tracktype = "track"
	TracktypeRoute Tracktype = "route"
)

func (e *Tracktype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Tracktype(s)
	case string:
		*e = Tracktype(s)
	default:
		return fmt.Errorf("unsupported scan type for Tracktype: %T", src)
	}
	return nil
}

type NullTracktype struct {
	Tracktype Tracktype
	Valid     bool // Valid is true if Tracktype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTracktype) Scan(value interface{}) error {
	if value == nil {
		ns.Tracktype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Tracktype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTracktype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Tracktype), nil
}

type Gpxfile struct {
	ID       int32
	Filename string
	Filesize int64
	Status   Filestatus
	// gpx metadata link field
	Link             string
	CreatedAt        time.Time
	UserID           int32
	Version          sql.NullString
	Creator          sql.NullString
	Name             sql.NullString
	Description      sql.NullString
	AuthorName       sql.NullString
	AuthorEmail      sql.NullString
	AuthorLink       sql.NullString
	AuthorLinkText   sql.NullString
	AuthorLinkType   sql.NullString
	Copyright        sql.NullString
	CopyrightYear    sql.NullString
	CopyrightLicense sql.NullString
	LinkText         sql.NullString
	LinkType         sql.NullString
	Time             sql.NullTime
	Keywords         sql.NullString
}

type Point struct {
	TrackID   int32
	Longitude interface{}
	Latitude  interface{}
}

type SchemaMigration struct {
	Version string
}

type Segment struct {
	ID       int32
	TrackID  int32
	Geometry interface{}
}

type Session struct {
	Token  string
	Data   []byte
	Expiry time.Time
}

type Track struct {
	ID        int32
	Name      string
	Type      Tracktype
	GpxfileID int32
	CreatedAt time.Time
	UserID    int32
}

type User struct {
	ID             int32
	Username       string
	HashedPassword string
	CreatedAt      time.Time
}
