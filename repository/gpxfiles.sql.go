// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: gpxfiles.sql

package repository

import (
	"context"
)

const deleteGPXFile = `-- name: DeleteGPXFile :exec
delete from "public"."gpxfiles" where id = $1
`

func (q *Queries) DeleteGPXFile(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteGPXFile, id)
	return err
}

const getGPXFile = `-- name: GetGPXFile :one
select id, filename, filesize, status, link, created_at from "public"."gpxfiles" where id = $1
`

func (q *Queries) GetGPXFile(ctx context.Context, id int32) (Gpxfile, error) {
	row := q.db.QueryRowContext(ctx, getGPXFile, id)
	var i Gpxfile
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Filesize,
		&i.Status,
		&i.Link,
		&i.CreatedAt,
	)
	return i, err
}

const getGPXFileByFilename = `-- name: GetGPXFileByFilename :one
select id, filename, filesize, status, link, created_at from "public"."gpxfiles" where filename = $1
`

func (q *Queries) GetGPXFileByFilename(ctx context.Context, filename string) (Gpxfile, error) {
	row := q.db.QueryRowContext(ctx, getGPXFileByFilename, filename)
	var i Gpxfile
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.Filesize,
		&i.Status,
		&i.Link,
		&i.CreatedAt,
	)
	return i, err
}

const getGPXFiles = `-- name: GetGPXFiles :many
select id, filename, filesize, status, link, created_at from "public"."gpxfiles" order by created_at desc
`

func (q *Queries) GetGPXFiles(ctx context.Context) ([]Gpxfile, error) {
	rows, err := q.db.QueryContext(ctx, getGPXFiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Gpxfile
	for rows.Next() {
		var i Gpxfile
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.Filesize,
			&i.Status,
			&i.Link,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertGPXFile = `-- name: InsertGPXFile :exec
insert into "public"."gpxfiles" (filename, filesize, link, status, created_at) values ($1, $2, $3, 'uploaded', Now())
`

type InsertGPXFileParams struct {
	Filename string
	Filesize int64
	Link     string
}

func (q *Queries) InsertGPXFile(ctx context.Context, arg InsertGPXFileParams) error {
	_, err := q.db.ExecContext(ctx, insertGPXFile, arg.Filename, arg.Filesize, arg.Link)
	return err
}
